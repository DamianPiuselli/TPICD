# Reading flights data
flights <- flights %>%
#Create day of week for calendar heat map and make the variables appear in the right order
mutate(date=paste(year,month,day,sep="-"),
date=as.Date(date,"%Y-%m-%d"),
dayofweek=weekdays(date),
week = isoweek(date))%>%
mutate(day_of_week=factor(dayofweek,levels = c("Sunday","Monday","Tuesday","Wednesday",
"Thursday","Friday","Saturday"),
labels=c("Dom","Lun","Mar","Mie","Jue","Vie","Sab"),
ordered=TRUE)) %>%
mutate(Month=factor(month,levels=1:12,labels=c("Ene","Feb","Mar","Abr","May",
"Jun","Jul","Ago","Sep","Oct","Nov","Dic"),
ordered=TRUE))%>%
#Create time period for barchart
mutate(period_dep_time = ifelse(between(hour, 5, 11), "5-11",
ifelse(between(hour, 12, 18), "12-18",
ifelse(between(hour, 19, 23), "19-23","unmatched")))) %>%
#Create dummy variable to ascertain whether the departure delay is above 15 minutes
mutate(delay_or_not = ifelse(dep_delay > 20, 1, 0)) %>%
select(origin,time_hour,month,day,Month,dep_delay,hour,carrier,tailnum,
day_of_week,delay_or_not,period_dep_time, week)
# Data skimming
summary(flights)
anomalies(flights)
distributions(flights)
# Reading flights data
flights <- flights %>%
#Create day of week for calendar heat map and make the variables appear in the right order
mutate(date=paste(year,month,day,sep="-"),
date=as.Date(date,"%Y-%m-%d"),
dayofweek=weekdays(date),
week = isoweek(date))%>%
mutate(day_of_week=factor(dayofweek,levels = c("Sunday","Monday","Tuesday","Wednesday",
"Thursday","Friday","Saturday"),
labels=c("Dom","Lun","Mar","Mie","Jue","Vie","Sab"),
ordered=TRUE)) %>%
mutate(Month=factor(month,levels=1:12,labels=c("Ene","Feb","Mar","Abr","May",
"Jun","Jul","Ago","Sep","Oct","Nov","Dic"),
ordered=TRUE))%>%
#Create time period for barchart
mutate(period_dep_time = ifelse(between(hour, 5, 11), "5-11",
ifelse(between(hour, 12, 18), "12-18",
ifelse(between(hour, 19, 23), "19-23","unmatched")))) %>%
#Create dummy variable to ascertain whether the departure delay is above 15 minutes
mutate(delay_or_not = ifelse(dep_delay > 20, 1, 0)) %>%
select(origin,time_hour,month,day,Month,dep_delay,hour,carrier,tailnum,
day_of_week,delay_or_not,period_dep_time, week)
# Reading weather
weather <- weather %>%
# 0.02% of N.A., not affect too much
filter(!is.na(wind_speed),!is.na(humid))%>%
select(time_hour,origin,humid,wind_speed,precip,visib,month)
# Reading planes: removing null values and selecting the variables we want
planes <- planes %>%
select(tailnum,year,type)
#consolidacion
data<-flights%>%
left_join(planes, by = "tailnum")%>%
inner_join(weather, by = c("origin", "time_hour","month"))
data %>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
pal1 <- brewer.pal(n = 3, name = 'Oranges')
data %>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay > 0, dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_violin(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
density_ridges
data %>%
filter(dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay > 0,dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos aereos.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay > 0,dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Origen:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos de partida.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay > 0,dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Aeropuerto:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos de partida.",
x="Retraso (min)",
y="Origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data %>%
filter(dep_delay > 0,dep_delay < quantile(dep_delay, 0.99, na.rm = TRUE))%>%
ggplot(aes(x=dep_delay, y=origin, fill=origin))+
geom_density_ridges(alpha=.8)+
scale_fill_manual(name="Aeropuerto:",values = pal1)+
theme_ridges()+
labs(title="Distribucion de densidad de los retrasos de partida.",
x="Retraso (min)",
y="Aeropuerto de origen",
caption = "Figura 1")+
theme(legend.position = c(0.8,0.8))
data%>%
group_by(month) %>%
summarise(count=n(), count_delay = sum(delay_or_not, na.rm=TRUE))%>%
ggplot(aes(x=month,y=count))+
geom_line(linetype=5,size=1,color=pal1[2])+
geom_point(size=2,color=pal1[3])+
scale_x_discrete(limits=factor(1:12))+
labs(x="Mes",y="Numero de retrasos", title="Numero de retrasos por mes.", caption = "Figura 2")+
theme_ridges()
data%>%
group_by(month) %>%
summarise(count=n(), count_delay = sum(delay_or_not, na.rm=TRUE), delay_percentage = 100* count_delay/count)%>%
ggplot(aes(x=month,y=count))+
geom_line(linetype=5,size=1,color=pal1[2])+
geom_point(size=2,color=pal1[3])+
scale_x_discrete(limits=factor(1:12))+
labs(x="Mes",y="Numero de retrasos", title="Numero de retrasos por mes.", caption = "Figura 2")+
theme_ridges()
data%>%
group_by(month) %>%
summarise(count=n(), count_delay = sum(delay_or_not, na.rm=TRUE), delay_percentage = 100* count_delay/count)%>%
ggplot(aes(x=month,y=delay_percentage))+
geom_line(linetype=5,size=1,color=pal1[2])+
geom_point(size=2,color=pal1[3])+
scale_x_discrete(limits=factor(1:12))+
labs(x="Mes",y="Numero de retrasos", title="Numero de retrasos por mes.", caption = "Figura 2")+
theme_ridges()
data%>%
group_by(month) %>%
summarise(count=n(), count_delay = sum(delay_or_not, na.rm=TRUE), delay_percentage = 100* count_delay/count)%>%
ggplot(aes(x=month,y=delay_percentage))+
geom_line(linetype=5,size=1,color=pal1[2])+
geom_point(size=2,color=pal1[3])+
scale_x_discrete(limits=factor(1:12))+
labs(x="Mes",y="Porcentaje de vuelos retrasados (%)", title="Porcentaje de retrasos por mes.", caption = "Figura 2")+
theme_ridges()
library(tidyverse)
library(modelr)
### Carga de los datos
setwd("D:/documents/UNSAM/INTRO A DATOS/tpfinal")
orders <- read_csv("olist_orders_dataset.csv")
order_items <- read_csv("olist_order_items_dataset.csv")
products <- read_csv("olist_products_dataset.csv")
sellers <- read_csv("olist_sellers_dataset.csv")
items <- read_csv("olist_order_items_dataset.csv")
payment <- read_csv("olist_order_payments_dataset.csv")
customers <- read_csv("olist_customers_dataset.csv")
geolocalation <- read_csv("olist_geolocation_dataset.csv")
geolocalation <- geolocalation %>%
group_by(geolocation_zip_code_prefix) %>%
summarise(geolocation_lat = median(geolocation_lat),
geolocation_lng = median(geolocation_lng))
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng)
View(envios)
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng)
View(envios)
# Función para calcular la distancia entre dos puntos en kilómetros utilizando la fórmula del haversine
haversine_distance <- function(lat1, lon1, lat2, lon2) {
# Radio de la Tierra en kilómetros
earth_radius <- 6371
# Convertir las coordenadas a radianes
lat1 <- lat1 * pi / 180
lon1 <- lon1 * pi / 180
lat2 <- lat2 * pi / 180
lon2 <- lon2 * pi / 180
# Diferencia entre las latitudes y longitudes
dlat <- lat2 - lat1
dlon <- lon2 - lon1
# Calcular el haversine
a <- sin(dlat/2)^2 + cos(lat1) * cos(lat2) * sin(dlon/2)^2
c <- 2 * asin(sqrt(a))
# Calcular la distancia
distance <- earth_radius * c
return(distance)
}
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, seller_lat, customer_lng, seller_lng)) %>%
select(price, freight_value, distancia_envio, customer_state, seller_state)
View(sellers)
View(envios)
library(tidyverse)
library(modelr)
### Carga de los datos
setwd("D:/documents/UNSAM/INTRO A DATOS/tpfinal")
orders <- read_csv("olist_orders_dataset.csv")
order_items <- read_csv("olist_order_items_dataset.csv")
products <- read_csv("olist_products_dataset.csv")
sellers <- read_csv("olist_sellers_dataset.csv")
items <- read_csv("olist_order_items_dataset.csv")
payment <- read_csv("olist_order_payments_dataset.csv")
customers <- read_csv("olist_customers_dataset.csv")
geolocalation <- read_csv("olist_geolocation_dataset.csv")
### Modelos para prediccion del costo de envio ~ distancia, volumen del paquete, tipo de item?.
## Distancia
# order_items tiene los datos de cada item enviado, incl. costo de envio, precio del item, id del cliente, id del vendedor
# con la id del vendedor/cliente se puede sacar el codigo ZIP de sellers/customers
# con los zip codes y geolocalation se pueden sacar las coordenadas y en funcion de ellas calcular la distancia del envio
# para cada item.
#Geolocation tiene multiples valores por zipcode para cada ciudad. Reemplazo las coordenadas con la mediana p/ cada zipcode
geolocalation <- geolocalation %>%
group_by(geolocation_zip_code_prefix) %>%
summarise(geolocation_lat = median(geolocation_lat),
geolocation_lng = median(geolocation_lng))
# Función para calcular la distancia entre dos puntos en kilómetros utilizando la fórmula del haversine
haversine_distance <- function(lat1, lon1, lat2, lon2) {
# Radio de la Tierra en kilómetros
earth_radius <- 6371
# Convertir las coordenadas a radianes
lat1 <- lat1 * pi / 180
lon1 <- lon1 * pi / 180
lat2 <- lat2 * pi / 180
lon2 <- lon2 * pi / 180
# Diferencia entre las latitudes y longitudes
dlat <- lat2 - lat1
dlon <- lon2 - lon1
# Calcular el haversine
a <- sin(dlat/2)^2 + cos(lat1) * cos(lat2) * sin(dlon/2)^2
c <- 2 * asin(sqrt(a))
# Calcular la distancia
distance <- earth_radius * c
return(distance)
}
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
select(price, freight_value, distancia_envio, customer_state, seller_state)
View(envios)
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value))+
geom_point()
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value))+
geom_point(alpha=.1)
View(order_items)
#
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value, color=customer_state))+
geom_point(alpha=.1)
View(products)
head(products)
names(products)
glimpse(products)
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(products, by="product_id") %>%
mutate(product_volume = product_length_cm*product_height_cm*product_width_cm) %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
select(price, freight_value, distancia_envio, customer_state, seller_state, product_category_name,)
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(products, by="product_id") %>%
mutate(product_volume = product_length_cm*product_height_cm*product_width_cm) %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
select(price, freight_value, distancia_envio, customer_state, seller_state, product_category_name, product_volume, product_weight_g)
View(envios)
# Scatter plots
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value, color=product_category_name))+
geom_point(alpha=.1)
unique(envios$product_category_name)
envios %>%
ggplot(aes(x=distancia_envio))+
geom_density()
envios %>%
ggplot(aes(x=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(y=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(y=distancia_envio))+
geom_violin()
envios %>%
ggplot(aes(x=distancia_envio))+
geom_violin()
envios %>%
ggplot(aes(x=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(y=distancia_envio))+
geom_boxplot()
mean(envios$distancia_envio)
mean(envios$distancia_envio, na.rm=T)
median(envios$distancia_envio, na.rm=T)
View(envios)
max(envios$distancia_envio, na.rm=T)
envios %>%
ggplot(aes(product_volume, y= freight_value, color=product_category_name))+
geom_point(alpha=.1)
envios %>%
ggplot(aes(product_volume, y= freight_value))+
geom_point(alpha=.1)
View(items)
envios %>%
ggplot(aes(product_weight_g, y= freight_value))+
geom_point(alpha=.1)
envios %>%
ggplot(aes(product_volume, y= freight_value))+
geom_point(alpha=.1)
envios %>%
ggplot(aes(price, y= freight_value))+
geom_point(alpha=.1)
mod1 = lm(data=envios, freight_value ~ distancia_envios + product_volume + product_weight_g)
mod1 = lm(data=envios, freight_value ~ distancia_envio + product_volume + product_weight_g)
summary(mod1)
envios %>% add_predictions(model=mod1)
envios %>% add_predictions(model=mod1) %>%
ggplot(aes(y=pred, x=freight_value))+
geom_point()
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(products, by="product_id") %>%
mutate(product_volume = product_length_cm*product_height_cm*product_width_cm) %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
filter(freight_value = 0) %>% #filtro envios bonificados
select(price, freight_value, distancia_envio, customer_state, seller_state, product_category_name, product_volume, product_weight_g)
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(products, by="product_id") %>%
mutate(product_volume = product_length_cm*product_height_cm*product_width_cm) %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
filter(freight_value == 0) %>% #filtro envios bonificados
select(price, freight_value, distancia_envio, customer_state, seller_state, product_category_name, product_volume, product_weight_g)
median(envios$distancia_envio, na.rm=T) # Mediana de la distancia de envio 430 Km!
max(envios$distancia_envio, na.rm=T) # Max 8677 Km. Aproximadamente de punta a punta del pais? > ver con los states.
envios %>%
ggplot(aes(y=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value))+
geom_point(alpha=.1)
View(envios)
envios <- order_items %>%
left_join(orders, by="order_id") %>%
left_join(customers, by="customer_id") %>%
left_join(sellers, by="seller_id") %>%
left_join(products, by="product_id") %>%
mutate(product_volume = product_length_cm*product_height_cm*product_width_cm) %>%
left_join(geolocalation, by=c("customer_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(customer_lat = geolocation_lat) %>%
rename(customer_lng = geolocation_lng) %>%
left_join(geolocalation, by=c("seller_zip_code_prefix" = "geolocation_zip_code_prefix")) %>%
rename(seller_lat = geolocation_lat) %>%
rename(seller_lng = geolocation_lng) %>%
mutate(distancia_envio = haversine_distance(customer_lat, customer_lng, seller_lat, seller_lng)) %>%
filter(freight_value > 0) %>% #filtro envios bonificados
select(price, freight_value, distancia_envio, customer_state, seller_state, product_category_name, product_volume, product_weight_g)
median(envios$distancia_envio, na.rm=T) # Mediana de la distancia de envio 505 Km!
max(envios$distancia_envio, na.rm=T) # Max 2386 Km. Aproximadamente de punta a punta del pais? > ver con los states.
envios %>%
ggplot(aes(y=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(y=distancia_envio))+
geom_boxplot()
envios %>%
ggplot(aes(x=distancia_envio, y= freight_value))+
geom_point(alpha=.1)
